{"expireTime":9007200850268884000,"key":"gatsby-plugin-mdx-entire-payload-67f94f7aaec04960375fbe5f77c3cb46-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/andrew.hock/particarbo/node_modules/gatsby-theme-carbon/src/templates/Default.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":116,"offset":117},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":119},"end":{"line":5,"column":29,"offset":147},"indent":[]}},{"type":"jsx","value":"<PageDescription>","position":{"start":{"line":8,"column":1,"offset":150},"end":{"line":8,"column":18,"offset":167},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use this guide to contribute to the theme. We’ll show you how to get the development environment set up as quickly as possible so you can start contributing.","position":{"start":{"line":10,"column":1,"offset":169},"end":{"line":10,"column":158,"offset":326},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":169},"end":{"line":10,"column":158,"offset":326},"indent":[]}},{"type":"jsx","value":"</PageDescription>","position":{"start":{"line":12,"column":1,"offset":328},"end":{"line":12,"column":19,"offset":346},"indent":[]}},{"type":"jsx","value":"<AnchorLinks>\n  <AnchorLink>Project setup</AnchorLink>\n  <AnchorLink>Development</AnchorLink>\n  <AnchorLink>Work in a branch</AnchorLink>\n  <AnchorLink>Sass and CSS Modules</AnchorLink>\n  <AnchorLink>VS Code</AnchorLink>\n  <AnchorLink>Test pages</AnchorLink>\n  <AnchorLink>Publishing</AnchorLink>\n</AnchorLinks>","position":{"start":{"line":14,"column":1,"offset":348},"end":{"line":22,"column":15,"offset":659},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Project setup","position":{"start":{"line":24,"column":4,"offset":664},"end":{"line":24,"column":17,"offset":677},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":661},"end":{"line":24,"column":17,"offset":677},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Go to ","position":{"start":{"line":26,"column":4,"offset":682},"end":{"line":26,"column":10,"offset":688},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/Particle-design-system/gatsby-theme-Particle","children":[{"type":"text","value":"gatsby-theme-Particle","position":{"start":{"line":26,"column":11,"offset":689},"end":{"line":26,"column":32,"offset":710},"indent":[]}}],"position":{"start":{"line":26,"column":10,"offset":688},"end":{"line":26,"column":98,"offset":776},"indent":[]}},{"type":"text","value":" and click the ","position":{"start":{"line":26,"column":98,"offset":776},"end":{"line":26,"column":113,"offset":791},"indent":[]}},{"type":"inlineCode","value":"Fork","position":{"start":{"line":26,"column":113,"offset":791},"end":{"line":26,"column":119,"offset":797},"indent":[]}},{"type":"text","value":" button in the top-right corner.","position":{"start":{"line":26,"column":119,"offset":797},"end":{"line":26,"column":151,"offset":829},"indent":[]}}],"position":{"start":{"line":26,"column":4,"offset":682},"end":{"line":26,"column":151,"offset":829},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":679},"end":{"line":27,"column":1,"offset":830},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"After it’s finished, click on the ","position":{"start":{"line":28,"column":4,"offset":834},"end":{"line":28,"column":38,"offset":868},"indent":[]}},{"type":"inlineCode","value":"Clone or Download","position":{"start":{"line":28,"column":38,"offset":868},"end":{"line":28,"column":57,"offset":887},"indent":[]}},{"type":"text","value":" button and copy the contents.","position":{"start":{"line":28,"column":57,"offset":887},"end":{"line":28,"column":87,"offset":917},"indent":[]}}],"position":{"start":{"line":28,"column":4,"offset":834},"end":{"line":28,"column":87,"offset":917},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":831},"end":{"line":29,"column":1,"offset":918},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In your terminal, clone the repo into your directory of choice","position":{"start":{"line":30,"column":4,"offset":922},"end":{"line":30,"column":66,"offset":984},"indent":[]}}],"position":{"start":{"line":30,"column":4,"offset":922},"end":{"line":30,"column":66,"offset":984},"indent":[]}},{"type":"code","lang":"sh","meta":null,"value":"git clone [PASTE_URL_HERE]\ncd gatsby-theme-particle","position":{"start":{"line":32,"column":4,"offset":989},"end":{"line":35,"column":7,"offset":1059},"indent":[4,4,4]}}],"position":{"start":{"line":30,"column":1,"offset":919},"end":{"line":35,"column":7,"offset":1059},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":26,"column":1,"offset":679},"end":{"line":35,"column":7,"offset":1059},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Development","position":{"start":{"line":38,"column":4,"offset":1065},"end":{"line":38,"column":15,"offset":1076},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1062},"end":{"line":38,"column":15,"offset":1076},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"yarn dev","position":{"start":{"line":40,"column":3,"offset":1080},"end":{"line":40,"column":13,"offset":1090},"indent":[]}},{"type":"text","value":" – start the development environment","position":{"start":{"line":40,"column":13,"offset":1090},"end":{"line":40,"column":49,"offset":1126},"indent":[]}}],"position":{"start":{"line":40,"column":3,"offset":1080},"end":{"line":40,"column":49,"offset":1126},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1078},"end":{"line":40,"column":49,"offset":1126},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"yarn dev:clean","position":{"start":{"line":41,"column":3,"offset":1129},"end":{"line":41,"column":19,"offset":1145},"indent":[]}},{"type":"text","value":" – clear cache and restart dev","position":{"start":{"line":41,"column":19,"offset":1145},"end":{"line":41,"column":49,"offset":1175},"indent":[]}}],"position":{"start":{"line":41,"column":3,"offset":1129},"end":{"line":41,"column":49,"offset":1175},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1127},"end":{"line":41,"column":49,"offset":1175},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"yarn format","position":{"start":{"line":42,"column":3,"offset":1178},"end":{"line":42,"column":16,"offset":1191},"indent":[]}},{"type":"text","value":" – format your code with prettier","position":{"start":{"line":42,"column":16,"offset":1191},"end":{"line":42,"column":49,"offset":1224},"indent":[]}}],"position":{"start":{"line":42,"column":3,"offset":1178},"end":{"line":42,"column":49,"offset":1224},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1176},"end":{"line":42,"column":49,"offset":1224},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"yarn lint","position":{"start":{"line":43,"column":3,"offset":1227},"end":{"line":43,"column":14,"offset":1238},"indent":[]}},{"type":"text","value":" - check for errors in your javascript","position":{"start":{"line":43,"column":14,"offset":1238},"end":{"line":43,"column":52,"offset":1276},"indent":[]}}],"position":{"start":{"line":43,"column":3,"offset":1227},"end":{"line":43,"column":52,"offset":1276},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1225},"end":{"line":43,"column":52,"offset":1276},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"yarn test:prefix","position":{"start":{"line":44,"column":3,"offset":1279},"end":{"line":44,"column":21,"offset":1297},"indent":[]}},{"type":"text","value":" – build and serve with a path prefix","position":{"start":{"line":44,"column":21,"offset":1297},"end":{"line":44,"column":58,"offset":1334},"indent":[]}}],"position":{"start":{"line":44,"column":3,"offset":1279},"end":{"line":44,"column":58,"offset":1334},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1277},"end":{"line":44,"column":58,"offset":1334},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1078},"end":{"line":44,"column":58,"offset":1334},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Work in a branch","position":{"start":{"line":46,"column":4,"offset":1339},"end":{"line":46,"column":20,"offset":1355},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1336},"end":{"line":46,"column":20,"offset":1355},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You should always start a new project by pulling upstream changes into master and then creating a new branch. This workflow ensures you don’t accidentally commit anything to your master branch and get stuck when trying to open a pull request.","position":{"start":{"line":48,"column":1,"offset":1357},"end":{"line":48,"column":243,"offset":1599},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1357},"end":{"line":48,"column":243,"offset":1599},"indent":[]}},{"type":"code","lang":"sh","meta":null,"value":"git checkout master\ngit pull upstream master\ngit checkout -b my-branch-name","position":{"start":{"line":50,"column":1,"offset":1601},"end":{"line":54,"column":4,"offset":1686},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"When you’re ready to open a pull request, push to your origin remote.","position":{"start":{"line":56,"column":1,"offset":1688},"end":{"line":56,"column":70,"offset":1757},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1688},"end":{"line":56,"column":70,"offset":1757},"indent":[]}},{"type":"code","lang":"sh","meta":null,"value":"git push origin my-branch-name","position":{"start":{"line":58,"column":1,"offset":1759},"end":{"line":60,"column":4,"offset":1799},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You’ll get a message in your terminal with a URL to open up a pull request in the upstream repository. Navigate to that URL and be sure to give a detailed summary of your pull request in the title and body section of the form.","position":{"start":{"line":62,"column":1,"offset":1801},"end":{"line":62,"column":227,"offset":2027},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1801},"end":{"line":62,"column":227,"offset":2027},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Sass and CSS Modules","position":{"start":{"line":64,"column":4,"offset":2032},"end":{"line":64,"column":24,"offset":2052},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2029},"end":{"line":64,"column":24,"offset":2052},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For internal theme components we use ","position":{"start":{"line":66,"column":1,"offset":2054},"end":{"line":66,"column":38,"offset":2091},"indent":[]}},{"type":"link","title":null,"url":"https://sass-lang.com/documentation/syntax","children":[{"type":"text","value":"Sass","position":{"start":{"line":66,"column":39,"offset":2092},"end":{"line":66,"column":43,"offset":2096},"indent":[]}}],"position":{"start":{"line":66,"column":38,"offset":2091},"end":{"line":66,"column":88,"offset":2141},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":66,"column":88,"offset":2141},"end":{"line":66,"column":93,"offset":2146},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/css-modules/css-modules#css-modules","children":[{"type":"text","value":"CSS Modules","position":{"start":{"line":66,"column":94,"offset":2147},"end":{"line":66,"column":105,"offset":2158},"indent":[]}}],"position":{"start":{"line":66,"column":93,"offset":2146},"end":{"line":66,"column":162,"offset":2215},"indent":[]}},{"type":"text","value":". This allows us to take advantage of the Particle Design System resources while not worrying about className collisions. By default, each ","position":{"start":{"line":66,"column":162,"offset":2215},"end":{"line":66,"column":301,"offset":2354},"indent":[]}},{"type":"inlineCode","value":".scss","position":{"start":{"line":66,"column":301,"offset":2354},"end":{"line":66,"column":308,"offset":2361},"indent":[]}},{"type":"text","value":" file will be supplied with all of the Particle Sass ","position":{"start":{"line":66,"column":308,"offset":2361},"end":{"line":66,"column":361,"offset":2414},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/Particle-design-system/Particle/blob/master/packages/components/src/globals/scss/_vars.scss","children":[{"type":"text","value":"variables","position":{"start":{"line":66,"column":362,"offset":2415},"end":{"line":66,"column":371,"offset":2424},"indent":[]}}],"position":{"start":{"line":66,"column":361,"offset":2414},"end":{"line":66,"column":484,"offset":2537},"indent":[]}},{"type":"text","value":": color, spacing, theme, and motion, as well as type and layout mixins, are imported automatically.","position":{"start":{"line":66,"column":484,"offset":2537},"end":{"line":66,"column":583,"offset":2636},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2054},"end":{"line":66,"column":583,"offset":2636},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You should colocate your stylesheet with the component(s) that import it. If the component is ","position":{"start":{"line":68,"column":1,"offset":2638},"end":{"line":68,"column":95,"offset":2732},"indent":[]}},{"type":"inlineCode","value":"TreeView","position":{"start":{"line":68,"column":95,"offset":2732},"end":{"line":68,"column":105,"offset":2742},"indent":[]}},{"type":"text","value":" then the stylesheet should be ","position":{"start":{"line":68,"column":105,"offset":2742},"end":{"line":68,"column":136,"offset":2773},"indent":[]}},{"type":"inlineCode","value":"TreeView.module.scss","position":{"start":{"line":68,"column":136,"offset":2773},"end":{"line":68,"column":158,"offset":2795},"indent":[]}},{"type":"text","value":". All contained within the ","position":{"start":{"line":68,"column":158,"offset":2795},"end":{"line":68,"column":185,"offset":2822},"indent":[]}},{"type":"inlineCode","value":"TreeView","position":{"start":{"line":68,"column":185,"offset":2822},"end":{"line":68,"column":195,"offset":2832},"indent":[]}},{"type":"text","value":" directory.","position":{"start":{"line":68,"column":195,"offset":2832},"end":{"line":68,"column":206,"offset":2843},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":2638},"end":{"line":68,"column":206,"offset":2843},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"CSS Modules","position":{"start":{"line":70,"column":5,"offset":2849},"end":{"line":70,"column":16,"offset":2860},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":2845},"end":{"line":70,"column":16,"offset":2860},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You don’t need to prefix your classes as CSS Modules will generate unique class names for you. Import the class from the ","position":{"start":{"line":72,"column":1,"offset":2862},"end":{"line":72,"column":122,"offset":2983},"indent":[]}},{"type":"inlineCode","value":".scss","position":{"start":{"line":72,"column":122,"offset":2983},"end":{"line":72,"column":129,"offset":2990},"indent":[]}},{"type":"text","value":" file.","position":{"start":{"line":72,"column":129,"offset":2990},"end":{"line":72,"column":135,"offset":2996},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":2862},"end":{"line":72,"column":135,"offset":2996},"indent":[]}},{"type":"code","lang":"scss","meta":"path=TreeView.module.scss","value":".treeView {\n  color: $text-01;\n}","position":{"start":{"line":74,"column":1,"offset":2998},"end":{"line":78,"column":4,"offset":3068},"indent":[1,1,1,1]}},{"type":"code","lang":"jsx","meta":"path=TreeView.js","value":"import { treeView } from './style.css';\n\nconst TreeView = props => <div className={treeView} />;","position":{"start":{"line":80,"column":1,"offset":3070},"end":{"line":84,"column":4,"offset":3194},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For conditionally applying class names, use the ","position":{"start":{"line":86,"column":1,"offset":3196},"end":{"line":86,"column":49,"offset":3244},"indent":[]}},{"type":"inlineCode","value":"classname","position":{"start":{"line":86,"column":49,"offset":3244},"end":{"line":86,"column":60,"offset":3255},"indent":[]}},{"type":"text","value":" library. Note how we’re using a ","position":{"start":{"line":86,"column":60,"offset":3255},"end":{"line":86,"column":93,"offset":3288},"indent":[]}},{"type":"link","title":null,"url":"https://tylermcginnis.com/computed-property-names/","children":[{"type":"text","value":"computed property name","position":{"start":{"line":86,"column":94,"offset":3289},"end":{"line":86,"column":116,"offset":3311},"indent":[]}}],"position":{"start":{"line":86,"column":93,"offset":3288},"end":{"line":86,"column":169,"offset":3364},"indent":[]}},{"type":"text","value":" for the property being based to ","position":{"start":{"line":86,"column":169,"offset":3364},"end":{"line":86,"column":202,"offset":3397},"indent":[]}},{"type":"inlineCode","value":"cx","position":{"start":{"line":86,"column":202,"offset":3397},"end":{"line":86,"column":206,"offset":3401},"indent":[]}},{"type":"text","value":". That’s because the className isn’t literally ","position":{"start":{"line":86,"column":206,"offset":3401},"end":{"line":86,"column":253,"offset":3448},"indent":[]}},{"type":"inlineCode","value":"\"long\"","position":{"start":{"line":86,"column":253,"offset":3448},"end":{"line":86,"column":261,"offset":3456},"indent":[]}},{"type":"text","value":" it’s a value generated by CSS Modules and placed in the ","position":{"start":{"line":86,"column":261,"offset":3456},"end":{"line":86,"column":318,"offset":3513},"indent":[]}},{"type":"inlineCode","value":"long","position":{"start":{"line":86,"column":318,"offset":3513},"end":{"line":86,"column":324,"offset":3519},"indent":[]}},{"type":"text","value":" variable.","position":{"start":{"line":86,"column":324,"offset":3519},"end":{"line":86,"column":334,"offset":3529},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":3196},"end":{"line":86,"column":334,"offset":3529},"indent":[]}},{"type":"code","lang":"jsx","meta":"path=TreeView.js","value":"import cx from 'classname';\nimport { treeView, long } from './style.css';\n\nconst TreeView = props => {\n  const className = cx(treeView, {\n    [long]: props.long,\n  });\n  const TreeView = props => <div className={className} />;\n};","position":{"start":{"line":88,"column":1,"offset":3531},"end":{"line":98,"column":4,"offset":3788},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you need to target a global class not processed by CSS Modules, you can do so with the ","position":{"start":{"line":100,"column":1,"offset":3790},"end":{"line":100,"column":91,"offset":3880},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/css-modules/css-modules#exceptions","children":[{"type":"text","value":"global selector","position":{"start":{"line":100,"column":92,"offset":3881},"end":{"line":100,"column":107,"offset":3896},"indent":[]}}],"position":{"start":{"line":100,"column":91,"offset":3880},"end":{"line":100,"column":163,"offset":3952},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":100,"column":163,"offset":3952},"end":{"line":100,"column":164,"offset":3953},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":3790},"end":{"line":100,"column":164,"offset":3953},"indent":[]}},{"type":"code","lang":"scss","meta":null,"value":":global(.bx--grid) .codeBlock {\n  @include Particle--type-style('code-01');\n}","position":{"start":{"line":102,"column":1,"offset":3955},"end":{"line":106,"column":4,"offset":4044},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"VS Code","position":{"start":{"line":108,"column":4,"offset":4049},"end":{"line":108,"column":11,"offset":4056},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":4046},"end":{"line":108,"column":11,"offset":4056},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To get linting error feedback while writing javascript and SCSS in VS Code, install the ","position":{"start":{"line":110,"column":1,"offset":4058},"end":{"line":110,"column":89,"offset":4146},"indent":[]}},{"type":"link","title":null,"url":"https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint","children":[{"type":"text","value":"stylelint","position":{"start":{"line":110,"column":90,"offset":4147},"end":{"line":110,"column":99,"offset":4156},"indent":[]}}],"position":{"start":{"line":110,"column":89,"offset":4146},"end":{"line":110,"column":170,"offset":4227},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":110,"column":170,"offset":4227},"end":{"line":110,"column":175,"offset":4232},"indent":[]}},{"type":"link","title":null,"url":"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint","children":[{"type":"text","value":"ESlint","position":{"start":{"line":110,"column":176,"offset":4233},"end":{"line":110,"column":182,"offset":4239},"indent":[]}}],"position":{"start":{"line":110,"column":175,"offset":4232},"end":{"line":110,"column":259,"offset":4316},"indent":[]}},{"type":"text","value":" extensions. We use ESLint’s Prettier rules to format and lint all of our JavaScript in one pass. To get your code to format properly on save, add the following to a ","position":{"start":{"line":110,"column":259,"offset":4316},"end":{"line":110,"column":425,"offset":4482},"indent":[]}},{"type":"inlineCode","value":".vscode/settings.json","position":{"start":{"line":110,"column":425,"offset":4482},"end":{"line":110,"column":448,"offset":4505},"indent":[]}},{"type":"text","value":" in the root of your project","position":{"start":{"line":110,"column":448,"offset":4505},"end":{"line":110,"column":476,"offset":4533},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":4058},"end":{"line":110,"column":476,"offset":4533},"indent":[]}},{"type":"code","lang":"json","meta":"path=.vscode/settings.json","value":"{\n  \"editor.formatOnSave\": true,\n  \"[javascript]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"[javascriptreact]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"eslint.autoFixOnSave\": true,\n  \"prettier.disableLanguages\": [\"javascript\", \"javascriptreact\"]\n}","position":{"start":{"line":112,"column":1,"offset":4535},"end":{"line":124,"column":4,"offset":4826},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To lint the entire project and get errors in your ","position":{"start":{"line":126,"column":1,"offset":4828},"end":{"line":126,"column":51,"offset":4878},"indent":[]}},{"type":"inlineCode","value":"Problems","position":{"start":{"line":126,"column":51,"offset":4878},"end":{"line":126,"column":61,"offset":4888},"indent":[]}},{"type":"text","value":" tray, you can add the following to a ","position":{"start":{"line":126,"column":61,"offset":4888},"end":{"line":126,"column":99,"offset":4926},"indent":[]}},{"type":"inlineCode","value":".vscode/tasks.json","position":{"start":{"line":126,"column":99,"offset":4926},"end":{"line":126,"column":119,"offset":4946},"indent":[]}},{"type":"text","value":" file in the root of your project. You can run these tasks with ","position":{"start":{"line":126,"column":119,"offset":4946},"end":{"line":126,"column":183,"offset":5010},"indent":[]}},{"type":"inlineCode","value":"cmd+shift+d","position":{"start":{"line":126,"column":183,"offset":5010},"end":{"line":126,"column":196,"offset":5023},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":4828},"end":{"line":126,"column":196,"offset":5023},"indent":[]}},{"type":"code","lang":"json","meta":"path=.vscode/tasks.json","value":"{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:js\",\n      \"problemMatcher\": \"$eslint-stylish\"\n    },\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:scss\",\n      \"problemMatcher\": {\n        \"owner\": \"stylelint\",\n        \"fileLocation\": [\"relative\", \"${workspaceFolder}\"],\n        \"pattern\": [\n          {\n            \"regexp\": \"^([^\\\\s].*)$\",\n            \"file\": 1\n          },\n          {\n            \"regexp\": \"^\\\\s+(\\\\d+):(\\\\d+)\\\\s+(✖|warning)\\\\s+(.*)\\\\s\\\\s+(.*)$\",\n            \"line\": 1,\n            \"column\": 2,\n            \"severity\": 3,\n            \"message\": 4,\n            \"code\": 5,\n            \"loop\": true\n          }\n        ]\n      }\n    }\n  ]\n}","position":{"start":{"line":128,"column":1,"offset":5025},"end":{"line":162,"column":4,"offset":5760},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Test pages","position":{"start":{"line":164,"column":4,"offset":5765},"end":{"line":164,"column":14,"offset":5775},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":5762},"end":{"line":164,"column":14,"offset":5775},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you want to add examples of what you are working on or see changes you’ve made, you can add an MDX file to ","position":{"start":{"line":166,"column":1,"offset":5777},"end":{"line":166,"column":111,"offset":5887},"indent":[]}},{"type":"inlineCode","value":"packages/src/pages/test","position":{"start":{"line":166,"column":111,"offset":5887},"end":{"line":166,"column":136,"offset":5912},"indent":[]}},{"type":"text","value":" that will be visible at ","position":{"start":{"line":166,"column":136,"offset":5912},"end":{"line":166,"column":161,"offset":5937},"indent":[]}},{"type":"inlineCode","value":"(your-server-name)/test/(added-file)","position":{"start":{"line":166,"column":161,"offset":5937},"end":{"line":166,"column":199,"offset":5975},"indent":[]}},{"type":"text","value":" during development. If you do add a page to the ","position":{"start":{"line":166,"column":199,"offset":5975},"end":{"line":166,"column":248,"offset":6024},"indent":[]}},{"type":"inlineCode","value":"/test","position":{"start":{"line":166,"column":248,"offset":6024},"end":{"line":166,"column":255,"offset":6031},"indent":[]}},{"type":"text","value":" directory, update the below list with the file you added and its purpose to be included with your pull request.","position":{"start":{"line":166,"column":255,"offset":6031},"end":{"line":166,"column":367,"offset":6143},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":5777},"end":{"line":166,"column":367,"offset":6143},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"/test/spacing-audit","children":[{"type":"inlineCode","value":"Spacing audit","position":{"start":{"line":168,"column":4,"offset":6148},"end":{"line":168,"column":19,"offset":6163},"indent":[]}}],"position":{"start":{"line":168,"column":3,"offset":6147},"end":{"line":168,"column":41,"offset":6185},"indent":[]}},{"type":"text","value":": use this page to test spacing around components when combined in common patterns.","position":{"start":{"line":168,"column":41,"offset":6185},"end":{"line":168,"column":124,"offset":6268},"indent":[]}}],"position":{"start":{"line":168,"column":3,"offset":6147},"end":{"line":168,"column":124,"offset":6268},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":6145},"end":{"line":168,"column":124,"offset":6268},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":6145},"end":{"line":168,"column":124,"offset":6268},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Publishing","position":{"start":{"line":170,"column":4,"offset":6273},"end":{"line":170,"column":14,"offset":6283},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":6270},"end":{"line":170,"column":14,"offset":6283},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"figure out if it’s patch or feature","position":{"start":{"line":172,"column":4,"offset":6288},"end":{"line":172,"column":39,"offset":6323},"indent":[]}}],"position":{"start":{"line":172,"column":4,"offset":6288},"end":{"line":172,"column":39,"offset":6323},"indent":[]}}],"position":{"start":{"line":172,"column":1,"offset":6285},"end":{"line":172,"column":39,"offset":6323},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"from the root of the package run ","position":{"start":{"line":173,"column":4,"offset":6327},"end":{"line":173,"column":37,"offset":6360},"indent":[]}},{"type":"inlineCode","value":"lerna publish patch","position":{"start":{"line":173,"column":37,"offset":6360},"end":{"line":173,"column":58,"offset":6381},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":173,"column":58,"offset":6381},"end":{"line":173,"column":62,"offset":6385},"indent":[]}},{"type":"inlineCode","value":"lerna publish minor","position":{"start":{"line":173,"column":62,"offset":6385},"end":{"line":173,"column":83,"offset":6406},"indent":[]}}],"position":{"start":{"line":173,"column":4,"offset":6327},"end":{"line":173,"column":83,"offset":6406},"indent":[]}}],"position":{"start":{"line":173,"column":1,"offset":6324},"end":{"line":173,"column":83,"offset":6406},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"git push upstream master --follow-tags","position":{"start":{"line":174,"column":4,"offset":6410},"end":{"line":174,"column":42,"offset":6448},"indent":[]}}],"position":{"start":{"line":174,"column":4,"offset":6410},"end":{"line":174,"column":42,"offset":6448},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":6407},"end":{"line":174,"column":42,"offset":6448},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In the project’s ","position":{"start":{"line":175,"column":4,"offset":6452},"end":{"line":175,"column":21,"offset":6469},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/Particle-design-system/gatsby-theme-Particle/releases","children":[{"type":"text","value":"release tab","position":{"start":{"line":175,"column":22,"offset":6470},"end":{"line":175,"column":33,"offset":6481},"indent":[]}}],"position":{"start":{"line":175,"column":21,"offset":6469},"end":{"line":175,"column":108,"offset":6556},"indent":[]}},{"type":"text","value":", edit the new release to include a summary of new changes","position":{"start":{"line":175,"column":108,"offset":6556},"end":{"line":175,"column":166,"offset":6614},"indent":[]}}],"position":{"start":{"line":175,"column":4,"offset":6452},"end":{"line":175,"column":166,"offset":6614},"indent":[]}}],"position":{"start":{"line":175,"column":1,"offset":6449},"end":{"line":175,"column":166,"offset":6614},"indent":[]}}],"position":{"start":{"line":172,"column":1,"offset":6285},"end":{"line":175,"column":166,"offset":6614},"indent":[1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":178,"column":1,"offset":6617},"end":{"line":178,"column":31,"offset":6647},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":178,"column":31,"offset":6647}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/andrew.hock/particarbo/node_modules/gatsby-theme-carbon/src/templates/Default.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`Use this guide to contribute to the theme. We’ll show you how to get the development environment set up as quickly as possible so you can start contributing.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Project setup</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Development</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Work in a branch</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Sass and CSS Modules</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">VS Code</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Test pages</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Publishing</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Project setup`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Go to `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/Particle-design-system/gatsby-theme-Particle\"\n          }}>{`gatsby-theme-Particle`}</a>{` and click the `}<inlineCode parentName=\"p\">{`Fork`}</inlineCode>{` button in the top-right corner.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`After it’s finished, click on the `}<inlineCode parentName=\"p\">{`Clone or Download`}</inlineCode>{` button and copy the contents.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In your terminal, clone the repo into your directory of choice`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-sh\"\n          }}>{`git clone [PASTE_URL_HERE]\ncd gatsby-theme-particle\n`}</code></pre>\n      </li>\n    </ol>\n    <h2>{`Development`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn dev`}</inlineCode>{` – start the development environment`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn dev:clean`}</inlineCode>{` – clear cache and restart dev`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn format`}</inlineCode>{` – format your code with prettier`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn lint`}</inlineCode>{` - check for errors in your javascript`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn test:prefix`}</inlineCode>{` – build and serve with a path prefix`}</li>\n    </ul>\n    <h2>{`Work in a branch`}</h2>\n    <p>{`You should always start a new project by pulling upstream changes into master and then creating a new branch. This workflow ensures you don’t accidentally commit anything to your master branch and get stuck when trying to open a pull request.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`git checkout master\ngit pull upstream master\ngit checkout -b my-branch-name\n`}</code></pre>\n    <p>{`When you’re ready to open a pull request, push to your origin remote.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`git push origin my-branch-name\n`}</code></pre>\n    <p>{`You’ll get a message in your terminal with a URL to open up a pull request in the upstream repository. Navigate to that URL and be sure to give a detailed summary of your pull request in the title and body section of the form.`}</p>\n    <h2>{`Sass and CSS Modules`}</h2>\n    <p>{`For internal theme components we use `}<a parentName=\"p\" {...{\n        \"href\": \"https://sass-lang.com/documentation/syntax\"\n      }}>{`Sass`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/css-modules/css-modules#css-modules\"\n      }}>{`CSS Modules`}</a>{`. This allows us to take advantage of the Particle Design System resources while not worrying about className collisions. By default, each `}<inlineCode parentName=\"p\">{`.scss`}</inlineCode>{` file will be supplied with all of the Particle Sass `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Particle-design-system/Particle/blob/master/packages/components/src/globals/scss/_vars.scss\"\n      }}>{`variables`}</a>{`: color, spacing, theme, and motion, as well as type and layout mixins, are imported automatically.`}</p>\n    <p>{`You should colocate your stylesheet with the component(s) that import it. If the component is `}<inlineCode parentName=\"p\">{`TreeView`}</inlineCode>{` then the stylesheet should be `}<inlineCode parentName=\"p\">{`TreeView.module.scss`}</inlineCode>{`. All contained within the `}<inlineCode parentName=\"p\">{`TreeView`}</inlineCode>{` directory.`}</p>\n    <h3>{`CSS Modules`}</h3>\n    <p>{`You don’t need to prefix your classes as CSS Modules will generate unique class names for you. Import the class from the `}<inlineCode parentName=\"p\">{`.scss`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\",\n        \"metastring\": \"path=TreeView.module.scss\",\n        \"path\": \"TreeView.module.scss\"\n      }}>{`.treeView {\n  color: $text-01;\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"path=TreeView.js\",\n        \"path\": \"TreeView.js\"\n      }}>{`import { treeView } from './style.css';\n\nconst TreeView = props => <div className={treeView} />;\n`}</code></pre>\n    <p>{`For conditionally applying class names, use the `}<inlineCode parentName=\"p\">{`classname`}</inlineCode>{` library. Note how we’re using a `}<a parentName=\"p\" {...{\n        \"href\": \"https://tylermcginnis.com/computed-property-names/\"\n      }}>{`computed property name`}</a>{` for the property being based to `}<inlineCode parentName=\"p\">{`cx`}</inlineCode>{`. That’s because the className isn’t literally `}<inlineCode parentName=\"p\">{`\"long\"`}</inlineCode>{` it’s a value generated by CSS Modules and placed in the `}<inlineCode parentName=\"p\">{`long`}</inlineCode>{` variable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"path=TreeView.js\",\n        \"path\": \"TreeView.js\"\n      }}>{`import cx from 'classname';\nimport { treeView, long } from './style.css';\n\nconst TreeView = props => {\n  const className = cx(treeView, {\n    [long]: props.long,\n  });\n  const TreeView = props => <div className={className} />;\n};\n`}</code></pre>\n    <p>{`If you need to target a global class not processed by CSS Modules, you can do so with the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/css-modules/css-modules#exceptions\"\n      }}>{`global selector`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`:global(.bx--grid) .codeBlock {\n  @include Particle--type-style('code-01');\n}\n`}</code></pre>\n    <h2>{`VS Code`}</h2>\n    <p>{`To get linting error feedback while writing javascript and SCSS in VS Code, install the `}<a parentName=\"p\" {...{\n        \"href\": \"https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint\"\n      }}>{`stylelint`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\"\n      }}>{`ESlint`}</a>{` extensions. We use ESLint’s Prettier rules to format and lint all of our JavaScript in one pass. To get your code to format properly on save, add the following to a `}<inlineCode parentName=\"p\">{`.vscode/settings.json`}</inlineCode>{` in the root of your project`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"metastring\": \"path=.vscode/settings.json\",\n        \"path\": \".vscode/settings.json\"\n      }}>{`{\n  \"editor.formatOnSave\": true,\n  \"[javascript]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"[javascriptreact]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"eslint.autoFixOnSave\": true,\n  \"prettier.disableLanguages\": [\"javascript\", \"javascriptreact\"]\n}\n`}</code></pre>\n    <p>{`To lint the entire project and get errors in your `}<inlineCode parentName=\"p\">{`Problems`}</inlineCode>{` tray, you can add the following to a `}<inlineCode parentName=\"p\">{`.vscode/tasks.json`}</inlineCode>{` file in the root of your project. You can run these tasks with `}<inlineCode parentName=\"p\">{`cmd+shift+d`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"metastring\": \"path=.vscode/tasks.json\",\n        \"path\": \".vscode/tasks.json\"\n      }}>{`{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:js\",\n      \"problemMatcher\": \"$eslint-stylish\"\n    },\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:scss\",\n      \"problemMatcher\": {\n        \"owner\": \"stylelint\",\n        \"fileLocation\": [\"relative\", \"\\${workspaceFolder}\"],\n        \"pattern\": [\n          {\n            \"regexp\": \"^([^\\\\\\\\s].*)$\",\n            \"file\": 1\n          },\n          {\n            \"regexp\": \"^\\\\\\\\s+(\\\\\\\\d+):(\\\\\\\\d+)\\\\\\\\s+(✖|warning)\\\\\\\\s+(.*)\\\\\\\\s\\\\\\\\s+(.*)$\",\n            \"line\": 1,\n            \"column\": 2,\n            \"severity\": 3,\n            \"message\": 4,\n            \"code\": 5,\n            \"loop\": true\n          }\n        ]\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <h2>{`Test pages`}</h2>\n    <p>{`If you want to add examples of what you are working on or see changes you’ve made, you can add an MDX file to `}<inlineCode parentName=\"p\">{`packages/src/pages/test`}</inlineCode>{` that will be visible at `}<inlineCode parentName=\"p\">{`(your-server-name)/test/(added-file)`}</inlineCode>{` during development. If you do add a page to the `}<inlineCode parentName=\"p\">{`/test`}</inlineCode>{` directory, update the below list with the file you added and its purpose to be included with your pull request.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/test/spacing-audit\"\n        }}><inlineCode parentName=\"a\">{`Spacing audit`}</inlineCode></a>{`: use this page to test spacing around components when combined in common patterns.`}</li>\n    </ul>\n    <h2>{`Publishing`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`figure out if it’s patch or feature`}</li>\n      <li parentName=\"ol\">{`from the root of the package run `}<inlineCode parentName=\"li\">{`lerna publish patch`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`lerna publish minor`}</inlineCode></li>\n      <li parentName=\"ol\">{`git push upstream master —follow-tags`}</li>\n      <li parentName=\"ol\">{`In the project’s `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/Particle-design-system/gatsby-theme-Particle/releases\"\n        }}>{`release tab`}</a>{`, edit the new release to include a summary of new changes`}</li>\n    </ol>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}